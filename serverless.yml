service: CustomerService

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'eu-west-2'}
  host: ${file(./config/${self:provider.stage}.json):database.host}
  port: ${file(./config/${self:provider.stage}.json):database.port}
  database: ${file(./config/${self:provider.stage}.json):database.database}
  username: ${file(./config/${self:provider.stage}.json):database.username}
  password: ${file(./config/${self:provider.stage}.json):database.password}
  cognito-arn: ${file(./config/${self:provider.stage}.json):cognito-arn}
  logRetentionInDays: 7
#   tracing:
#     lambda: true
#     apiGateway: true
  logs:
    restApi: true
  vpc:
    securityGroupIds: ${file(./config/${self:provider.stage}.json):securityGroupIds}
    subnetIds: ${file(./config/${self:provider.stage}.json):subnetIds}
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - test/**
    - .git/**
    - .serverless/**
    - coverage/**
    - README.md
    - TODO.md
    - LICENSE

functions:
  getCustomerCompanyDetails:
    name: getCustomerCompanyDetails-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-company/getCustomerCompanyDetails.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to retrieve customer company details
    events:
      - http:
          path: /customer/company
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  postCustomerCompanyDetails:
    name: postCustomerCompanyDetails-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-company/postCustomerCompanyDetails.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to post customer company details
    events:
      - http:
          path: /customer/company
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  putCustomerCompanyDetails:
    name: putCustomerCompanyDetails-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-company/putCustomerCompanyDetails.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to update customer company details
    events:
      - http:
          path: /customer/company
          method: put
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  deleteCustomerCompanyDetails:
    name: deleteCustomerCompanyDetails-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-company/deleteCustomerCompanyDetails.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to delete customer company details
    events:
      - http:
          path: /customer/company
          method: delete
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getCustomerAddressList:
    name: getCustomerAddressList-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-address/getCustomerAddressList.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to retrieve customer address List
    events:
      - http:
          path: /customer/address-list
          method: get
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  getCustomerAddress:
    name: getCustomerAddress-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-address/getCustomerAddress.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to retrieve customer address
    events:
      - http:
          path: /customer/address/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  postCustomerAddress:
    name: postCustomerAddress-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-address/postCustomerAddress.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to post customer address details
    events:
      - http:
          path: /customer/address
          method: post
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  putCustomerAddress:
    name: putCustomerAddress-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-address/putCustomerAddress.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to put customer address
    events:
      - http:
          path: /customer/address/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  deleteCustomerAddressList:
    name: deleteCustomerAddressList-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-address/deleteCustomerAddressList.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to delete customer address list
    events:
      - http:
          path: /customer/address-list
          method: delete
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  deleteCustomerAddress:
    name: deleteCustomerAddress-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-address/deleteCustomerAddress.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to delete customer address
    events:
      - http:
          path: /customer/address/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${self:provider.cognito-arn}
            claims:
              - phone_number
          cors:
            origins:
              - '*'
            headers:
              - Content-Type
              - Authorization
  eraseCustomerAddressList:
    name: eraseCustomerAddressList-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-address/eraseCustomerAddressList.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to erase customer address list

resources:
  Resources:
    CustomerFunctionsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
          - PolicyName: lambda
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
          - PolicyName: VPCAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
