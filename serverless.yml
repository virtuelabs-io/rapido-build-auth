service: CustomerService

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-2
  host: ${env:HOST}
  port: ${env:PORT}
  database: ${env:DATABASE}
  username: ${env:USERNAME}
  password: ${env:PASSWORD}
  # cognito-arn: ${env:COGNITO_ARN}
  vpc:
    securityGroupIds:
      - sg-bdeab9d6
    subnetIds:
      - subnet-9c76e2f5
      - subnet-be6d8af2
      - subnet-e9b86893
package:
  individually: true
  excludeDevDependencies: true
  exclude:
    - test/**
    - .git/**
    - .serverless/**
    - coverage/**
    - README.md
    - TODO.md
    - LICENSE

functions:
  getCustomerCompanyDetails:
    name: getCustomerCompanyDetails-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-company/getCustomerCompanyDetails.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to retrieve customer company details
    events:
      - http:
          path: /customer/company
          method: get
          integration: lambda
        #   authorizer:
        #     name: authorizer
        #     arn: ${self:provider.cognito-arn}
        #     claims:
        #       - phone_number
        #   cors:
        #     origins:
        #       - '*'
        #     headers:
        #       - Content-Type
        #       - Authorization
  postCustomerCompanyDetails:
    name: postCustomerCompanyDetails-${self:provider.stage}
    role: CustomerFunctionsLambdaRole
    handler: src/customer-company/postCustomerCompanyDetails.fun
    memorySize: 128
    timeout: 10
    environment:
      HOST: ${self:provider.host}
      PORT: ${self:provider.port}
      DATABASE: ${self:provider.database}
      USERNAME: ${self:provider.username}
      PASSWORD: ${self:provider.password}
    tags:
      purpose: lambda function to post customer company details
    events:
      - http:
          path: /customer/company
          method: post
          integration: lambda

# plugins:
#   - serverless-domain-manager

# custom:
#   customDomain:
#     domainName: serverless.rapidobuild.com
#     basePath: api
#     stage: ${self:provider.stage}
#     createRoute53Record: true
#     endpointType: regional

resources:
  Resources:
    CustomerFunctionsLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: "sts:AssumeRole"
        Path: /
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
          - PolicyName: lambda
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
          - PolicyName: VPCAccess
            PolicyDocument:
              Statement:
                Effect: Allow
                Action:
                  - "ec2:CreateNetworkInterface"
                  - "ec2:DescribeNetworkInterfaces"
                  - "ec2:DeleteNetworkInterface"
                Resource: "*"
